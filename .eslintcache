[{"/Users/winters/Documents/project/learn/react-shudan/src/App.js":"1","/Users/winters/Documents/project/learn/react-shudan/src/shudan/helper.js":"2","/Users/winters/Documents/project/learn/react-shudan/src/shudan/Goban.js":"3","/Users/winters/Documents/project/learn/react-shudan/src/shudan/CoordY.js":"4","/Users/winters/Documents/project/learn/react-shudan/src/shudan/Grid.js":"5","/Users/winters/Documents/project/learn/react-shudan/src/shudan/CoordX.js":"6","/Users/winters/Documents/project/learn/react-shudan/src/index.js":"7","/Users/winters/Documents/project/learn/react-shudan/src/shudan/Vertex.js":"8","/Users/winters/Documents/project/learn/react-shudan/src/shudan/BoundedGoban.js":"9","/Users/winters/Documents/project/learn/react-shudan/src/shudan/Line.js":"10"},{"size":13075,"mtime":1612532259506,"results":"11","hashOfConfig":"12"},{"size":2725,"mtime":1612532823921,"results":"13","hashOfConfig":"12"},{"size":6421,"mtime":1612532883299,"results":"14","hashOfConfig":"12"},{"size":529,"mtime":1611933280618,"results":"15","hashOfConfig":"12"},{"size":2407,"mtime":1612532634875,"results":"16","hashOfConfig":"12"},{"size":601,"mtime":1611933280618,"results":"17","hashOfConfig":"12"},{"size":220,"mtime":1612531511944,"results":"18","hashOfConfig":"12"},{"size":4039,"mtime":1612531599524,"results":"19","hashOfConfig":"12"},{"size":114,"mtime":1611909429790,"results":"20","hashOfConfig":"21"},{"size":944,"mtime":1612531599523,"results":"22","hashOfConfig":"12"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"raxx3k",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"25"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lle7ed",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"/Users/winters/Documents/project/learn/react-shudan/src/App.js",[],["45","46"],"/Users/winters/Documents/project/learn/react-shudan/src/shudan/helper.js",[],"/Users/winters/Documents/project/learn/react-shudan/src/shudan/Goban.js",["47"],"import React, { useState, useEffect,useRef } from 'react'\n\nimport CoordX from './CoordX'\nimport CoordY from './CoordY'\nimport Grid from './Grid'\nimport Vertex from './Vertex'\nimport Line from './Line'\n\n// import helper from './helper'\nconst { range, getHoshis, readjustShifts, random, diffSignMap, vertexEquals} = require('./helper') \nconst classnames = require('classnames') \n\n\nfunction Goban(props) {\n  let {\n    vertexSize = 24,\n    coordX,\n    coordY,\n    rangeX = [0, Infinity],\n    rangeY = [0, Infinity],\n    busy,\n    signMap = [],\n    paintMap,\n    heatMap,\n    markerMap,\n    ghostStoneMap,\n    animateStonePlacement = false,\n    fuzzyStonePlacement = false,\n    showCoordinates = true,\n    lines = [],\n    selectedVertices = [],\n    dimmedVertices = []\n  } = props\n\n  // 宽高从signMap读取\n  let width = signMap.length === 0 ? 0 : signMap[0].length\n  let height = signMap.length\n\n  // 坐标数组\n  let xs = range(width).slice(rangeX[0], rangeX[1] + 1)\n  let ys = range(height).slice(rangeY[0], rangeY[1] + 1)\n\n  // 星位\n  let hoshis = getHoshis(width, height)\n\n  // 不规则棋子位置\n  const [shiftMap, setShiftMap] = useState(readjustShifts(\n    signMap.map(row => row.map(_ => random(8)))\n  ))\n\n  let randomMap = signMap.map(row => row.map(_ => random(4)))\n\n  const [clearAnimatedVertices, setClearAnimatedVertices] = useState()\n  const [animatedVertices, setAnimatedVertices] = useState([])\n\n  const signMapRef = useRef(signMap)\n\n  // 落子动画\n  useEffect(() => {\n    let diff = diffSignMap(signMapRef.current, signMap)\n\n    if ( animateStonePlacement && !clearAnimatedVertices && diff.length > 0 ) {\n      signMapRef.current = signMap\n      setAnimatedVertices(diff)\n      for (let [x, y] of diff) {\n        shiftMap[y][x] = random(7) + 1\n        readjustShifts(shiftMap, [x, y])\n      }\n      setShiftMap(shiftMap)\n\n      setClearAnimatedVertices(setTimeout(() => {\n        setAnimatedVertices([])\n        setClearAnimatedVertices(null)\n      }, 200))\n    }\n  }, [signMap])\n\n  return (\n    <div \n      className={classnames('shudan-goban', 'shudan-goban-image', {\n        'shudan-busy': busy,\n        'shudan-coordinates': showCoordinates\n      }) + ' ' +\n      (props.class || props.className || '')} \n\n      style={Object.assign({\n        display: 'inline-grid',\n        gridTemplateRows: showCoordinates ? '1em 1fr 1em' : '1fr',\n        gridTemplateColumns: showCoordinates ? '1em 1fr 1em' : '1fr',\n        fontSize: vertexSize,\n        lineHeight: '1em'\n      }, props.style || {})} >\n\n      { showCoordinates && (\n        <>\n          <CoordX style={{gridRow: '1', gridColumn: '2'}}  xs={xs} coordX={coordX}/>\n          <CoordY style={{gridRow: '2', gridColumn: '1'}}  ys={ys} coordY={coordY} height={height} />\n        </>\n      )}\n\n      <div \n        className=\"shudan-content\"\n        style={{\n          position: 'relative',\n          width: `${xs.length}em`,\n          height: `${ys.length}em`,\n          gridRow: showCoordinates ? '2' : '1',\n          gridColumn: showCoordinates ? '2' : '1'\n        }} >\n        <Grid \n          vertexSize={vertexSize}\n          width={width}\n          height={height}\n          xs={xs}\n          ys={ys}\n          hoshis={hoshis} />\n\n        <div\n          className='shudan-vertices'\n          style={{\n            display: 'grid',\n            gridTemplateColumns: `repeat(${xs.length}, 1em)`,\n            gridTemplateRows: `repeat(${ys.length}, 1em)`,\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            zIndex: 1\n          }}>\n          { \n            ys.map(y =>\n              xs.map(x => {\n                let equalsVertex = v => vertexEquals(v, [x, y])\n                let selected = selectedVertices.some(equalsVertex)\n\n                return (\n                  <Vertex \n                    key={[x, y].join('-')}\n                    position={[x, y]}\n                    shift={fuzzyStonePlacement ? shiftMap && shiftMap[y] && shiftMap[y][x] : 0}\n                    random={randomMap && randomMap[y] && randomMap[y][x]}\n                    sign={signMap && signMap[y] && signMap[y][x]}\n                    heat={heatMap && heatMap[y] && heatMap[y][x]}\n                    paint={paintMap && paintMap[y] && paintMap[y][x]}\n                    marker={markerMap && markerMap[y] && markerMap[y][x]}\n                    ghostStone={ghostStoneMap && ghostStoneMap[y] && ghostStoneMap[y][x]}\n                    dimmed={dimmedVertices.some(equalsVertex)}\n                    animate= {animatedVertices.some(equalsVertex)}\n                    selected={selected}\n                    selectedLeft={selected && selectedVertices.some(v =>\n                      vertexEquals(v, [x - 1, y])\n                    )}\n                    selectedRight={selected && selectedVertices.some(v =>\n                      vertexEquals(v, [x + 1, y])\n                    )}\n                    selectedTop={selected && selectedVertices.some(v =>\n                      vertexEquals(v, [x, y - 1])\n                    )}\n                    selectedBottom={selected && selectedVertices.some(v =>\n                      vertexEquals(v, [x, y + 1])\n                    )}\n\n                    onMouseUp={props.onVertexMouseUp}\n                  />\n                )\n              })\n            )\n          }\n\n          <div className='shudan-lines' style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            overflow: 'hidden',\n            pointerEvents: 'none',\n            zIndex: 2\n          }}>\n            <div style={{\n              position: 'absolute',\n              top: `-${rangeY[0]}em`,\n              left: `-${rangeX[0]}em`,\n              width: `${width}em`,\n              height: `${height}em`\n            }}>\n              {\n                lines.map(({v1, v2, type}, i) => {\n                  return (<Line key={i} v1={v1} v2={v2} type={type} vertexSize={vertexSize} />)\n                })\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n\n      { showCoordinates && (\n        <>\n          <CoordY style={{gridRow: '2', gridColumn: '3'}}  ys={ys} coordY={coordY} height={height} />\n          <CoordX style={{gridRow: '3', gridColumn: '2'}}  xs={xs} coordX={coordX} />\n        </>\n      )}\n      \n    </div>\n  )\n\n}\n\n\nexport default React.memo(Goban) \n","/Users/winters/Documents/project/learn/react-shudan/src/shudan/CoordY.js",[],"/Users/winters/Documents/project/learn/react-shudan/src/shudan/Grid.js",[],"/Users/winters/Documents/project/learn/react-shudan/src/shudan/CoordX.js",[],"/Users/winters/Documents/project/learn/react-shudan/src/index.js",[],"/Users/winters/Documents/project/learn/react-shudan/src/shudan/Vertex.js",[],"/Users/winters/Documents/project/learn/react-shudan/src/shudan/BoundedGoban.js",[],"/Users/winters/Documents/project/learn/react-shudan/src/shudan/Line.js",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":76,"column":6,"nodeType":"54","endLine":76,"endColumn":15,"suggestions":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'animateStonePlacement', 'clearAnimatedVertices', and 'shiftMap'. Either include them or remove the dependency array. You can also do a functional update 'setShiftMap(s => ...)' if you only need 'shiftMap' in the 'setShiftMap' call.","ArrayExpression",["58"],"no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},"Update the dependencies array to be: [animateStonePlacement, clearAnimatedVertices, shiftMap, signMap]",{"range":"61","text":"62"},[1951,1960],"[animateStonePlacement, clearAnimatedVertices, shiftMap, signMap]"]